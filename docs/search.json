[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Emergency trends indicators of raccoon in Europe\nThis is the homepage of the project. Here you can find the following sections:\n\nDashboard: show emergency trend indicators based on number of observations and measured occupancy, i.e. the number of 1x1km grid cells with one or more observations.\nAbout Data: the workflow in R to calculate the emergency indicators."
  },
  {
    "objectID": "src/about_data.html",
    "href": "src/about_data.html",
    "title": "Emerging trend indicators of raccoon in Europe",
    "section": "",
    "text": "This document shows how using GBIF species occurrence cubes to assess the emerging status of raccoon (Procyon lotor) in Europe and in European countries. This workflow is strongly based on the occurrence TrIAS indicators and can be extended to other (invasive alien) species.\n\n\nFirst, list and load the needed packages.\n\n\nCode\nlibrary(readr)\nlibrary(here)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(trias)\nlibrary(countrycode)"
  },
  {
    "objectID": "src/about_data.html#introduction",
    "href": "src/about_data.html#introduction",
    "title": "Emerging trend indicators of raccoon in Europe",
    "section": "",
    "text": "This document shows how using GBIF species occurrence cubes to assess the emerging status of raccoon (Procyon lotor) in Europe and in European countries. This workflow is strongly based on the occurrence TrIAS indicators and can be extended to other (invasive alien) species.\n\n\nFirst, list and load the needed packages.\n\n\nCode\nlibrary(readr)\nlibrary(here)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(trias)\nlibrary(countrycode)"
  },
  {
    "objectID": "src/about_data.html#scope",
    "href": "src/about_data.html#scope",
    "title": "Emerging trend indicators of raccoon in Europe",
    "section": "2 Scope",
    "text": "2 Scope\n\n2.1 Taxonomic scope\nThe species of interest is the raccoon (Procyon lotor (Linnaeus, 1758), GBIF Key: 5218786). This workflow can easily be extended to other species.\n\n\nCode\nspecies &lt;- tibble::tibble(\n  specieskey = c(5218786),\n  canonical_name = c(\"Procyon lotor\")\n)\n\n\n\n\n2.2 Spatial scope\nWe are interested over the emerging status of the four species in the European countries and all Europe.\n\n\n2.3 Temporal scope\nWe request a species occurrence cube based on data from 1950."
  },
  {
    "objectID": "src/about_data.html#species-occurrence-cube",
    "href": "src/about_data.html#species-occurrence-cube",
    "title": "Emerging trend indicators of raccoon in Europe",
    "section": "3 Species occurrence cube",
    "text": "3 Species occurrence cube\nWe triggered a GBIF occurrence cube via the Occurrence SQL Download API and on the hand of a JSON query (query_cube_raccoon.json). The resulting cube (DOI: 10.15468/dl.mmnusj, downloadKey: 0023024-250127130748423) can be downloaded in TSV format from GBIF. We have it saved at data/input as 0023024-250127130748423.csv:\n\n\nCode\ncube &lt;- readr::read_tsv(\n  here::here(\n    \"data\",\n    \"input\",\n    \"0023024-250127130748423.csv\"\n  )\n)\n\n\nPreview:\n\n\nCode\nhead(cube)\n\n\n\n  \n\n\n\nNotice the presence of column countrycode as we grouped by country. It can happen that an occurrence is assigned to a cell in another country or a cell on the border of two different countries It happens few times:\n\n\nCode\ncube |&gt;\n  dplyr::distinct(eeacellcode, countrycode, year) |&gt;\n  dplyr::add_count(eeacellcode, year) |&gt;\n  dplyr::filter(n &gt; 1) |&gt;\n  dplyr::arrange(eeacellcode)\n\n\n\n  \n\n\n\nCountries with at least one occurrence:\n\n\nCode\ncube |&gt;\n  dplyr::distinct(countrycode) |&gt;\n  dplyr::pull(countrycode)\n\n\n [1] \"BE\" \"NL\" \"DE\" \"AZ\" \"ES\" \"GB\" \"FR\" \"LU\" \"CH\" \"DK\" \"LI\" \"SE\" \"CZ\" \"AT\" \"PL\"\n[16] \"RU\" \"GE\" \"IT\" \"LT\" \"IE\" \"UA\" \"PT\" \"NO\"\n\n\nRemove countries not completely covered by the EEA grid:\n\nUkraine (UA)\nRussia (RU)\nAzerbaijan (AZ)\n\n\n\nCode\ncube &lt;- cube |&gt;\n  dplyr::filter(!countrycode %in% c(\"UA\", \"RU\", \"AZ\"))\n\n\nAre there rows without eeacellcode?\n\n\nCode\ncube |&gt;\n  dplyr::filter(is.na(eeacellcode))\n\n\n\n  \n\n\n\nWe remove them:\n\n\nCode\ncube &lt;- cube |&gt;\n  dplyr::filter(!is.na(eeacellcode))\n\n\nExtract country codes:\n\n\nCode\ncountrycode &lt;- cube |&gt;\n  dplyr::distinct(countrycode) |&gt;\n  dplyr::pull(countrycode)\ncountrycode\n\n\n [1] \"BE\" \"NL\" \"DE\" \"ES\" \"GB\" \"FR\" \"LU\" \"CH\" \"DK\" \"LI\" \"SE\" \"CZ\" \"AT\" \"PL\" \"IT\"\n[16] \"LT\" \"IE\" \"PT\" \"NO\"\n\n\nGet country names from country codes:\n\n\nCode\ncountries &lt;- tibble::tibble(\n  countrycode = countrycode) |&gt;\n  dplyr::mutate(country_name = countrycode::countrycode(countrycode, \"iso2c\", \"country.name\"))\ncountries\n\n\n\n  \n\n\n\nWe add \"Europe\" to the list of country names and codes. We use \"Europe\" as “country code”: the abbreviation EU would be confusing as it is the acronym of the European Union:\n\n\nCode\ncountries &lt;- countries |&gt;\n  dplyr::add_row(countrycode = \"Europe\", country_name = \"Europe\")\ncountrycode &lt;- c(countrycode, \"Europe\")\n\n\nSo, from now on, when we refer to “country”, we also mean “Europe”.\nWe calculate the cube for Europe:\n\n\nCode\ncube_europe &lt;- cube |&gt;\n  group_by(specieskey, species, year, eeacellcode) |&gt;\n  summarise(\n    countrycode = \"Europe\",\n    occurrences = sum(occurrences),\n    class = unique(class),\n    classkey = unique(classkey),\n    mincoordinateuncertaintyinmeters = min(mincoordinateuncertaintyinmeters),\n    mintemporaluncertainty = min(mintemporaluncertainty),\n    classcount = unique(classcount),\n    .groups = \"drop\") %&gt;%\n  # order columns as in the original cube\n  dplyr::select(\n    dplyr::all_of(names(cube))\n  )\nhead(cube_europe)\n\n\n\n  \n\n\n\nAnd we add it to cube:\n\n\nCode\ncube &lt;- dplyr::bind_rows(cube, cube_europe)"
  },
  {
    "objectID": "src/about_data.html#from-cubes-to-emerging-status",
    "href": "src/about_data.html#from-cubes-to-emerging-status",
    "title": "Emerging trend indicators of raccoon in Europe",
    "section": "4 From cubes to emerging status",
    "text": "4 From cubes to emerging status\nWe assess the emerging status of the species at country level and in all Europe for 2024. We first have to create time series up to 2024.\n\n\nCode\nlast_year &lt;- 2024\n\n\n\n4.1 Preprocess: from cube to time series\nFor each country, define cells with at least one observation:\n\n\nCode\ndf_cc &lt;-   cube |&gt;\n  dplyr::group_by(specieskey, countrycode) |&gt;\n  dplyr::distinct(eeacellcode) |&gt;\n  dplyr::ungroup()\n\n\nFor each country, identify the first year with at least one observation:\n\n\nCode\ndf_begin_year &lt;-\n  cube |&gt;\n  dplyr::group_by(specieskey, countrycode) |&gt;\n  dplyr::summarize(begin_year = min(year))\n\n\n`summarise()` has grouped output by 'specieskey'. You can override using the\n`.groups` argument.\n\n\nFor each country, combine begin_year and unique eeacellcode as found above:\n\n\nCode\ndf_cc &lt;-   df_cc |&gt;\n  dplyr::left_join(df_begin_year, by = c(\"specieskey\", \"countrycode\")) |&gt; \n  dplyr::select(specieskey, countrycode, begin_year, eeacellcode)\n\n\nPreview:\n\n\nCode\nhead(df_cc)\n\n\n\n  \n\n\n\nFor each cell (eeacellcode), country (countrycode) and species (specieskey) we can now create a time series:\n\n\nCode\n# Define help function\nmake_time_series &lt;- function(eeacellcode, countrycode, specieskey, begin_year, last_year) {\n  tidyr::expand_grid(\n    eeacellcode = eeacellcode,\n    countrycode = countrycode,\n    specieskey = specieskey,\n    year = seq(from = begin_year, to = last_year)\n  )\n}\n\n# Create timeseries slots\ndf_ts &lt;- purrr::pmap_dfr(df_cc,\n  .f = make_time_series,\n  last_year = last_year\n)\n\n# Add occurrence data\ndf_ts &lt;-\n  df_ts |&gt;\n  dplyr::left_join(\n    cube |&gt; dplyr::select(\n      specieskey,\n      countrycode,\n      year,\n      eeacellcode,\n      occurrences\n    ),\n    by = c(\"specieskey\", \"countrycode\", \"year\", \"eeacellcode\")\n  )\n\n# Replace NAs with 0\ndf_ts &lt;-\n  df_ts |&gt;\n  tidyr::replace_na(list(occurrences = 0))\n\n\nAdd column for presence (1) or absence (0):\n\n\nCode\ndf_ts &lt;-\n  df_ts |&gt;\n  dplyr::mutate(\n    ispresent = dplyr::if_else(occurrences &gt; 0, 1, 0)\n  )\n\n\nSave the time series at country level as an interim output, time_series.tsv in directory data/interim:\n\n\nCode\nreadr::write_tsv(\n  df_ts,\n  here::here(\"data\", \"interim\", \"time_series.tsv\"),\n  na = \"\"\n)\n\n\n\n\n4.2 Apply GAM\nWe are now ready to apply a Generalized Additive Model (GAM) to assess the emerging status of raccoon.\n\n\nCode\neval_year &lt;- 2024\n\n\nLet’s compact the time series:\n\n\nCode\ncompact_df_ts &lt;- df_ts |&gt;\n    dplyr::group_by(specieskey, countrycode, year) |&gt;\n    dplyr::summarise(\n      occs = sum(occurrences),\n      ncells = sum(ispresent),\n      .groups = \"drop\")\n\n\nAll plots will be saved in subdirectories of ./data/output/GAM_outputs:\n\n\nCode\ndir_name_basic &lt;- here::here(\"data\", \"output\", \"GAM_outputs\")\n\n\nWe also define the plot dimensions in pixels:\n\n\nCode\nplot_dimensions &lt;- list(width = 2800, height = 1500)\n\n\nWe apply GAM for each country for the number of occurrences:\n\n\nCode\ngam_occs &lt;- purrr::map(\n  countrycode,\n  function(code) {\n    gam_occs_per_country &lt;- purrr::map2(\n      species$specieskey, species$canonical_name,\n      function(t, n) {\n        df_key &lt;- compact_df_ts |&gt;\n          dplyr::filter(specieskey == t, countrycode == code)\n        trias::apply_gam(\n          df = df_key,\n          y_var = \"occs\",\n          taxonKey = \"specieskey\",\n          eval_years = 2024,\n          type_indicator = \"observations\",\n          taxon_key = t,\n          name = n,\n          df_title = code,\n          dir_name = paste0(dir_name_basic, \"/long_titles\"),\n          y_label = \"number of observations\",\n          saveplot = TRUE,\n          width = plot_dimensions$width,\n          height = plot_dimensions$height\n        )\n      })\n    names(gam_occs_per_country) &lt;- species$canonical_name\n    gam_occs_per_country\n  }\n)\nnames(gam_occs) &lt;- countrycode\n\n\nAnd the number of occupied cells, or measured occupancy:\n\n\nCode\ngam_ncells &lt;- purrr::map(\n  countrycode,\n  function(code) {\n    gam_ncells_per_country &lt;- purrr::map2(\n      species$specieskey, species$canonical_name,\n      function(t, n) {\n        df_key &lt;- compact_df_ts |&gt;\n          dplyr::filter(specieskey == t, countrycode == code)\n        trias::apply_gam(\n          df = df_key,\n          y_var = \"ncells\",\n          taxonKey = \"specieskey\",\n          eval_years = 2024,\n          type_indicator = \"occupancy\",\n          taxon_key = t,\n          name = n,\n          df_title = code,\n          dir_name = paste0(dir_name_basic, \"/long_titles\"),\n          y_label = \"number of occupied cells\",\n          saveplot = TRUE,\n          width = plot_dimensions$width,\n          height = plot_dimensions$height\n        )\n      })\n    names(gam_ncells_per_country) &lt;- species$canonical_name\n    gam_ncells_per_country\n  }\n)\nnames(gam_ncells) &lt;- countrycode"
  },
  {
    "objectID": "src/about_data.html#plots",
    "href": "src/about_data.html#plots",
    "title": "Emerging trend indicators of raccoon in Europe",
    "section": "5 Plots",
    "text": "5 Plots\nPlease go to ./data/output/GAM_outputs to download the plots shown in this section.\n\n5.1 Standard plots\nIn this section we show the plots as returned by apply_gam(). Plot titles could be quite long. Folder: ./data/output/GAM_outputs/long_titles.\n\n5.1.1 Occurrences\n\n\nCode\npurrr::walk(gam_occs, function(country) {\n  purrr::walk(country, function(x) print(x$plot))\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.1.2 Measured occupancy\n\n\nCode\npurrr::walk(gam_ncells, function(country) {\n  purrr::walk(country, function(x) print(x$plot))\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2 Short titles\nWe show and save plots with the species only as title. We save them in sub folder ./data/output/GAM_outputs/short_title.\n\n5.2.1 Occurrences\n\n\nCode\npurrr::iwalk(gam_occs, function(x, country) {\n  purrr::iwalk(x, function(y, sp) {\n    y$plot &lt;- y$plot + ggplot2::ggtitle(label = paste(sp, \"-\", country))\n    ggplot2::ggsave(\n      filename = here::here(\n        \"data\",\n        \"output\",\n        \"GAM_outputs\",\n        \"short_title\",\n        paste0(\"occurrences_\", sp, \"_\", country, \".png\")),\n      plot = y$plot,\n      width = plot_dimensions$width,\n      height = plot_dimensions$height,\n      units = \"px\"\n    )\n    print(y$plot)\n  })\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2.2 Occupancy\nWe do the same for the measured occupancy (number of occupied grid cells).\n\n\nCode\npurrr::iwalk(gam_ncells, function(x, country) {\n  purrr::iwalk(x, function(y, sp) {\n    y$plot &lt;- y$plot + ggplot2::ggtitle(label = paste(sp, \"-\", country))\n    ggplot2::ggsave(\n      filename = here::here(\n        \"data\",\n        \"output\",\n        \"GAM_outputs\",\n        \"short_title\",\n        paste0(\"occupancy_\", sp, \"_\", country, \".png\")),\n      plot = y$plot,\n      width = plot_dimensions$width,\n      height = plot_dimensions$height,\n      units = \"px\"\n    )\n    print(y$plot)\n  })\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3 Grid\nFor each country, we can show the plots of the number of occurrences and the measured occupancy next to each other. We use the full country name. Plots are saved in subfolder ./data/output/GAM_outputs/plots_for_countries.\n\n\nCode\n# Transform gam_occs and gam_ncells into a list of lists \ngam_countries &lt;- purrr::map(\n  countrycode,\n  function(code) {\n    purrr::map2(\n      gam_occs[[code]],\n      gam_ncells[[code]],\n      function(x, y) list(occurrences = x, ncells = y)\n    )\n  }\n)\nnames(gam_countries) &lt;- countrycode\n# Create a grid of plots for each country\npurrr::walk2(\n  gam_countries,\n  countrycode,\n  function(country, code) {\n    purrr::walk(country, function(x) {\n      # Remove title\n      x$occurrences$plot &lt;- x$occurrences$plot + ggplot2::ggtitle(NULL)\n      x$ncells$plot &lt;- x$ncells$plot + ggplot2::ggtitle(NULL)\n      p &lt;- patchwork::wrap_plots(x$occurrences$plot,\n                                 x$ncells$plot,\n                                 nrow = 1,\n                                 ncol = 2) +\n        # Unify legends\n        patchwork::plot_layout(guides = 'collect') + \n        # Add general title\n        patchwork::plot_annotation(\n          title = countries$country_name[countries$countrycode == code]\n        )\n      ggplot2::ggsave(\n        filename = here::here(\n          \"data\",\n          \"output\",\n          \"GAM_outputs\",\n          \"plots_for_countries\",\n          paste0(code, \"_grid.png\")),\n        plot = p,\n        width = plot_dimensions$width,\n        height = plot_dimensions$height,\n        units = \"px\"\n      )\n      print(p)\n    })\n  }\n)"
  }
]